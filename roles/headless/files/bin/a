#!/bin/bash
set -e

ACTION=${1:-null}
ENV=${2:-null}
TARGET=${3:-null}
DO=${4:-null}
DONT=${5:-null}

# Split target into SCOPE@HOSTS, if delimited
if [[ $TARGET == *"@"* ]]; then
    SCOPE=$(echo $TARGET | cut -d'@' -f1)
    HOSTS=$(echo $TARGET | cut -d'@' -f2)
else
    SCOPE='null'
    HOSTS=$TARGET
fi

if [ "$ACTION" != "list" ] && [ "$ACTION" != "check" ] && [ "$ACTION" != "play" ] && [ "$ACTION" != "try" ] && [ "$ACTION" != "sh" ] && [ "$ACTION" != "ping" ] && [ "$ACTION" != "edit" ] && [ "$ACTION" != "diff" ]; then
    echo "The first argument must be either 'list', 'check', 'play', 'try', 'sh', 'ping', 'edit', or 'diff'."
    exit 1
fi

if [ "$ACTION" != "edit" ] && [ "$ACTION" != "diff" ] && [ "$HOSTS" == "null" ]; then
    echo "The third argument must match one or more hosts in inventory, or specify an inventory."
    exit 1
fi

if [ "$ACTION" == "sh" ] && [ "$DO" == "null" ]; then
    echo "The fourth argument must be a command statement."
    exit 1
fi

if [[ "$DONT" == -* ]]; then
    DONT=$(echo $DONT | cut -c2-)
elif [ "$DONT" != "null" ]; then
    echo "The last argument must be prefixed with '-'."
    exit 1
fi

if [[ $HOSTS != *"."* ]] && [[ $HOSTS != *"*"* ]] && [[ $HOSTS != *"localhost"* ]] && [[ $HOSTS != "all" ]]; then
    HOSTS="$HOSTS.*"
fi

current_tmux_window_name=$(tmux display-message -p '#W')
function restore_tmux_window_name {
    tmux rename-window "$current_tmux_window_name"
}
trap restore_tmux_window_name EXIT

if [ "$ACTION" == "edit" ]; then
    set -x
    tmux rename-window "$ENV/inventory"
    ansible-vault edit --vault-id "$ENV.pass" "$ENV.yml"
    set +x
    exit 0
fi

if [ "$ACTION" == "diff" ]; then
    if [ ! -f "$ENV" ]; then
        echo "The second argument must correspond to an encrypted file in the current directory."
        exit 1
    fi

    if [ "$TARGET" == "null" ]; then
        TARGET=HEAD
    fi
    base_filename=$(echo $ENV | cut -d'.' -f1)
    # Show a diff of uncommitted changes to an ansible-vault encrypted file
    # without storing plaintext on disk and without modifying tracked files.
    git show "$TARGET:Ansible/$ENV" > ".$ENV.$TARGET"
    diff --color=always -u20 <(ansible-vault view --vault-id "$base_filename.pass" ".$ENV.$TARGET") <(ansible-vault view --vault-id "$base_filename.pass" "$ENV") || true
    rm -rf ".$ENV.$TARGET"
    exit 0
fi

tmux rename-window "$ENV/${TARGET//\*}"

if [ "$ACTION" == 'sh' ]; then
    set -x
    ansible "$(echo "$HOSTS")" --vault-id "$ENV.pass" -i "$ENV.yml" -m shell -a "$(echo "$DO")" -v
    set +x
    exit 0
elif [ "$ACTION" == 'ping' ]; then
    set -x
    ansible "$(echo "$HOSTS")" --vault-id "$ENV.pass" -i "$ENV.yml" -m ping
    set +x
    exit 0
elif [ "$ACTION" == 'check' ] || [ "$ACTION" == 'try' ]; then
    modifier_flag='--check'
elif [ "$ACTION" == 'list' ]; then
    modifier_flag='--list-tasks'
else
    modifier_flag=''
fi

if [ "$SCOPE" != 'null' ]; then
    extra_vars_flag="--extra-vars=scope=$(echo "$SCOPE")"
fi

if [ -f "$DO" ]; then
    playbook="${DO}"
    tags_flag=""
elif [ "$DO" == 'null' ]; then
    playbook='site.yml'
    tags_flag=""
else
    playbook='site.yml'
    tags_flag="--tags=${DO}"
fi

if [ "$DONT" == 'null' ]; then
    skip_tags=""
else
    skip_tags="--skip-tags=${DONT}"
fi

if [ "$ACTION" == 'try' ]; then
    try='try'
else
    try=''
fi

set -x
ANSIBLE_DISPLAY_OK_HOSTS=false $try ansible-playbook --limit="$(echo "$HOSTS")" --vault-id "deploy.pass" --vault-id "$ENV.pass" -i "$ENV.yml" $playbook ${tags_flag} ${skip_tags} ${extra_vars_flag} ${modifier_flag} -v
set +x

if [ "$ACTION" == 'try' ]; then
    modifier_flag=''
    set -x
    ANSIBLE_DISPLAY_OK_HOSTS=false ansible-playbook --limit="$(echo "$HOSTS")" --vault-id "deploy.pass" --vault-id "$ENV.pass" -i "$ENV.yml" $playbook ${tags_flag} ${skip_tags} ${extra_vars_flag} ${modifier_flag} -v
    set +x
fi
